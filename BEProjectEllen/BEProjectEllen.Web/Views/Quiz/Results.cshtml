@model BEProjectEllen.Core.UserQuiz
@*@using MultipleModelInOneView;*@
@{
    ViewData["Title"] = "Results";
}

<div class="c-board">

    <h1>Results</h1>



    @await Component.InvokeAsync("HighScore", new { QuizId = Model.QuizId })



    <table class="table table-hover">
        <thead>
            <tr>
                <th scope="col">Title</th>
                <th scope="col">CORRECT?</th>
                <th scope="col">SCORE</th>
                <th scope="col">Image</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var userChoice in Model.UserChoices)
            {


                <tr>
                    <th>@userChoice.Choice.Question.Title</th>

                    <td> @userChoice.Choice.IsCorrect </td>
                    <td>@userChoice.Choice.Question.ScoreValue</td>
                    <td>
                        @if (userChoice.Choice.ImageUrl != null)
                        {
                            <img class="c-choiceImage" src="@userChoice.Choice.ImageUrl" alt="Image of @userChoice.Choice.Description" />
                        }
                    </td>
                </tr>

            }

        </tbody>
    </table>



    @*<div class="c-question-score">
            <div class="c-questionTitle"></div>
            <div>Score:&nbsp;<div class="c-questionTitle"></div></div>
        </div>

        <hr />

        <div class="@(userChoice.Choice.IsCorrect ? "c-choice" : "c-choice c-choice--incorrect")">

            <div>@userChoice.Choice.Description</div>

            <br />


            <br />
            <div class="c-questionTitle">@userChoice.Choice.IsCorrect</div>

            <br />
            <br />

        </div>*@

    
</div>

@*<style>
        .c-choice {
            //standaard styles

                backgroundcolor : green;
        }

        .choice--incorrect{
            background-color : red;
        }
    </style>*@
